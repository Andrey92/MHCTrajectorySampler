#ifndef SAMPLER_TYPES_H
#define SAMPLER_TYPES_H

#include <list>
#include <vector>

#include "Trajectory.h"
#include "../util/Types.h"

using namespace std;

namespace sampler {

	// A sample object generated by the sampler is a valid trajectory
	typedef Trajectory Sample;
	typedef unordered_map<Sample, unsigned int> Samples;
	typedef pair<Sample, unsigned int> MultiSample;

	// Map of 'P(R|L)' values
	typedef pair<ReaderSet, unsigned int> RL;
	typedef unordered_map<RL, double> LikeliMap;
	typedef pair<RL, double> RLProb;

	// Map of 'P(L|R)' values for a particular time instant
	typedef unordered_map<unsigned int, double> ProbMap;
	typedef pair<unsigned int, double> LRProb;

}

using namespace sampler;

namespace std {

	/*
	 * Hash functions for map keys.
	 */

	template<> class hash<Trajectory> {
		public:
			size_t operator() (const Trajectory& t) const {
				return t.getId();
			}
	};

	template<> class hash<ReaderSet> {
		public:
			size_t operator() (const ReaderSet& rs) const {
				const size_t MUL = 37;
				size_t h = 0;
				for (auto it = rs.cbegin(); it != rs.cend(); it++) {
					h = h * MUL + *it;
				}
				return h;
			}
	};

	template<> class hash<RL> {
		public:
			size_t operator() (const RL& rl) const {
				const size_t MUL = 43;
				size_t h1 = hash<ReaderSet>()(rl.first);
				size_t h2 = hash<unsigned int>()(rl.second);
				return h1 * MUL + h2;
			}
	};

}

#endif
